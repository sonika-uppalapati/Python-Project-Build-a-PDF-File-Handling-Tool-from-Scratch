# -*- coding: utf-8 -*-
"""Python exe for PDF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aqmbkXtAPzlpOLI-bDu8yei8aZE1VDri

# Merging PDFs : Combine multiple PDF files into one
"""

# installing essential libraries
!pip install PyPDF2

# Merging multiple PDF files

import PyPDF2

def merge_pdfs(pdf_list, output_path):
    pdf_writer = PyPDF2.PdfWriter()
    for pdf in pdf_list:
        pdf_reader = PyPDF2.PdfReader(pdf)
        for page_num in range(len(pdf_reader.pages)):
            pdf_writer.add_page(pdf_reader.pages[page_num])

    with open(output_path, 'wb') as out:
        pdf_writer.write(out)
    print(f"Merged PDF saved as {output_path}")


# let's use the above function

# Provide the output path for the merged PDF
merge_pdfs(['Page+1.pdf','Page+2.pdf','Page+3.pdf', 'Page+4.pdf'], 'merged.pdf')

# our output file will be merged.pdf

# splitting PDF file yo multiple PDF files / pages

import PyPDF2

def split_pdf(pdf_path, output_dir):
    pdf_reader = PyPDF2.PdfReader(pdf_path)
    for page_num in range(len(pdf_reader.pages)):
        pdf_writer = PyPDF2.PdfWriter()
        pdf_writer.add_page(pdf_reader.pages[page_num])
        output_path = f"{output_dir}/page_{page_num + 1}.pdf"

        with open(output_path, 'wb') as out:
            pdf_writer.write(out)
        print(f" Saved {output_path}")

# let's use the above function

split_pdf('merged.pdf', 'pdf_files')

# extract text from PDF files
!pip install pdfplumber

import pdfplumber

def extract_text(pdf_path, output_text_path):
    with pdfplumber.open(pdf_path) as pdf:
        full_text = ""
        for page in pdf.pages:
            full_text += page.extract_text() + "\n"

        with open(output_text_path, 'w') as f:
            f.write(full_text)
        print(f"extracted text is saved as{output_text_path}")

# let's use the above function

extract_text('Page+1.pdf', 'output.txt')

# extract images from the PDF file
!pip install PyMuPDF

# extract images from the PDF file

import fitz  # PyMuPDF

def extract_images(pdf_path, output_dir):
    pdf_document = fitz.open(pdf_path)
    for page_index in range(len(pdf_document)):
        page = pdf_document.load_page(page_index)
        image_list = page.get_images(full=True)

        for image_index, img in enumerate(image_list):
            xref = img[0]
            base_image = pdf_document.extract_image(xref)
            image_bytes = base_image["image"]
            image_ext = base_image["ext"]
            image_filename = f"{output_dir}/image_{page_index + 1}_{image_index + 1}.{image_ext}"

            with open(image_filename, "wb") as image_file:
                image_file.write(image_bytes)
            print(f"Saved {image_filename}")

# let's use the above function

extract_images('Page+1.pdf', 'folder')

# creating password protected PDFs (encrypted PDF file).

import PyPDF2

def encrypt_pdf(input_pdf, output_pdf, password):
    pdf_reader = PyPDF2.PdfReader(input_pdf)
    pdf_writer = PyPDF2.PdfWriter()
    for page_num in range(len(pdf_reader.pages)):
        pdf_writer.add_page(pdf_reader.pages[page_num])

    pdf_writer.encrypt(password)

    with open(output_pdf, 'wb') as out:
        pdf_writer.write(out)
    print(f"Encrypted PDF saved as {output_pdf}")


# let's use the above function

encrypt_pdf('merged.pdf', 'encrypted.pdf', 'pass123')

# decrypting PDFs : remove password protection from PDF files

def decrypt_pdf(input_pdf, output_pdf, password):
    pdf_reader = PyPDF2.PdfReader(input_pdf)
    pdf_reader.decrypt(password)
    pdf_writer = PyPDF2.PdfWriter()
    for page_num in range(len(pdf_reader.pages)):
        pdf_writer.add_page(pdf_reader.pages[page_num])


    with open(output_pdf, 'wb') as out:
        pdf_writer.write(out)
    print(f"Decrypted PDF saved as {output_pdf}")


# let's use the above function

decrypt_pdf('encrypted.pdf', 'decrypted.pdf', 'pass123')

# rearranging PDF Pages : reorder or delete pages within a PDF

def rearrange_pages(input_pdf, output_pdf, page_order):
    pdf_reader = PyPDF2.PdfReader(input_pdf)
    pdf_writer = PyPDF2.PdfWriter()
    for page_num in page_order:
        pdf_writer.add_page(pdf_reader.pages[page_num])

    with open(output_pdf, 'wb') as out:
        pdf_writer.write(out)
    print(f"Rearranged PDF saved as {output_pdf}")


# let's use the above function

rearrange_pages('merged.pdf', 'rearrange.pdf', [2,1,0])

#[2,1,0] means file pages in reverse order

# rotating pages : rotate individual pages in a PDF

def rotate_pages(input_pdf, output_pdf, rotation):
    pdf_reader = PyPDF2.PdfReader(input_pdf)
    pdf_writer = PyPDF2.PdfWriter()
    for page_num in range(len(pdf_reader.pages)):
        page = pdf_reader.pages[page_num]
        page.rotate(rotation)
        pdf_writer.add_page(page)

    with open(output_pdf, 'wb') as out:
        pdf_writer.write(out)
    print(f"Rotated PDF saved as {output_pdf}")


# let's use the above function

rotate_pages('merged.pdf', 'rotated.pdf', 90)

# adding metadata : read, add or modify metadata (title, author, etc)

def read_metadata(pdf_file):
    pdf_reader = PyPDF2.PdfReader(pdf_file)
    metadata = pdf_reader.metadata

    print("Metadata of the PDF file is :")
    for key, value in metadata.items():
        print(f"{key}: {value}")


# let's use the above function

read_metadata('merged.pdf')

def add_metadata(input_pdf, output_pdf, tilte, author):
    pdf_reader = PyPDF2.PdfReader(input_pdf)
    pdf_writer = PyPDF2.PdfWriter()
    for page_num in range(len(pdf_reader.pages)):
        pdf_writer.add_page(pdf_reader.pages[page_num])

    metadata = {
        '/Title': tilte,
        '/Author': author
    }
    pdf_writer.add_metadata(metadata)

    with open(output_pdf, 'wb') as out:
        pdf_writer.write(out)
    print(f"Metadata added to PDF saved as {output_pdf}")


# let's use the above

add_metadata('merged.pdf', 'metadata.pdf', 'Sample File', 'Sonika')

def read_metadata(pdf_file):
    pdf_reader = PyPDF2.PdfReader(pdf_file)
    metadata = pdf_reader.metadata

    print("Metadata of the PDF file is :")
    for key, value in metadata.items():
        print(f"{key}: {value}")


# let's use the above function

read_metadata('metadata.pdf')

# optimize the file of the PDF file (compressing PDF file)
import fitz  # PyMuPDF

def optimize_pdf(input_file, output_file):
    pdf_document = fitz.open(input_file)
    pdf_document.save(output_file, garbage=4, deflate=True)
    print(f"Optimized PDF saved as {output_file}")


# let's use the above function

optimize_pdf('merged.pdf', 'optimized.pdf')

# building a file handling tool : creating executable ( .exe) files from python code

# example code : merging multiple PDF files


import PyPDF2
import os


def merge_pdfs(input_folder, output_pdf):
# remove the existing merged.pdf file if it exists.

    if os.path.exists(output_pdf):
        os.remove(output_pdf)

# get a list of PDF files in the input folder
    pdf_files = [file for file in os.listdir(input_folder) if file.endswith('.pdf')]

# sort the list of PDF files (this is optional)
    pdf_files.sort()

# create a PDF writer object
    pdf_writer = PyPDF2.PdfWriter() # Moved the pdf_writer initialization outside the loop
    for pdf in pdf_files:
        with open(os.path.join(input_folder, pdf), 'rb') as f:
            pdf_reader = PyPDF2.PdfReader(f) # Changed 'file' to 'f' to match the file object
            for page_num in range(len(pdf_reader.pages)):
                pdf_writer.add_page(pdf_reader.pages[page_num])

# write the merged PDF to the output file.
    with open(output_pdf, 'wb') as out:
        pdf_writer.write(out)
    print(f"Merged PDF saved as {output_pdf}")

# Let's use the above function

input_folder = 'pdf_files' # path to the folder containing PDF files to merge
output_pdf = 'pdf_files/merged.pdf' # path to the output merged PDF file

merge_pdfs(input_folder, output_pdf) # Removed extra space in 'output_pdf ' and passed the variables, not strings